// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package testharness.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

/**
 * Generates Pay to Public Key Hash (P2PKH) Bitcoin address (compressed and uncompressed public key)
 * 
 * Can be validated at https://awebanalysis.com/en/bitcoin-address-validate/
 */
public class ja_P2PKH extends CustomJavaAction<java.lang.String>
{
	public ja_P2PKH(IContext context)
	{
		super(context);
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		java.security.Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
		java.math.BigInteger privKey=org.web3j.crypto.Keys.createEcKeyPair().getPrivateKey();
		java.math.BigInteger pubKey=org.web3j.crypto.Sign.publicKeyFromPrivate(privKey);
		java.lang.String bcPub=this.compressPubKey(pubKey);
		java.security.MessageDigest sha=java.security.MessageDigest.getInstance("SHA-256");
		byte[]s1=sha.digest(this.hexStringToByteArray(bcPub));
		java.security.MessageDigest rmd=java.security.MessageDigest.getInstance("RipeMD160");
		byte[]r1=rmd.digest(s1);
		byte[]r2=new byte[r1.length+1];
		r2[0]=0;
		for(int i=0;i<r1.length;i++)r2[i+1]=r1[i];
		byte[]s2=sha.digest(r2);
		byte[]s3=sha.digest(s2);
		byte[] a1=new byte[25];
		for(int i=0;i<r2.length;i++)a1[i]=r2[i];
		for(int i=0;i<4;i++)a1[21+i]=s3[i];
		return org.bitcoinj.core.Base58.encode(a1);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ja_P2PKH";
	}

	// BEGIN EXTRA CODE
	public static java.lang.String compressPubKey(java.math.BigInteger pubKey){
		java.lang.String pubKeyYPrefix=pubKey.testBit(0)?"03":"02";
		java.lang.String pubKeyHex=pubKey.toString(16);
		java.lang.String pubKeyX=pubKeyHex.substring(0,64);
		return pubKeyYPrefix+pubKeyX;
	}
	public static byte[] hexStringToByteArray(String s){
		byte[]b=new byte[s.length()/2];
		for (int i=0;i<b.length;i++){
			int index=i*2;
			int v=Integer.parseInt(s.substring(index,index+2),16);
			b[i]=(byte)v;
		}
		return b;
	}
	// END EXTRA CODE
}
