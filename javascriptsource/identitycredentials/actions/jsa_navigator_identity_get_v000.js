// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * Syntax:
 * 
 * get()
 * get(options)
 * 
 * Example options:
 * {
 *   "digital": {
 *     "providers": [
 *       {
 *         "protocol": "basic",
 *         "request": "{\\"selector\\":{\\"format\\":[\\"mdoc\\"],\\"retention\\":{\\"days\\":90},\\"doctype\\":\\"org.iso.18013.5.1.mDL\\",\\"fields\\":[\\"org.iso.18013.5.1.document_number\\",\\"org.iso.18013.5.1.portrait\\",\\"org.iso.18013.5.1.driving_privileges\\",\\"org.iso.18013.5.1.aamva.organ_donor\\"]},\\"nonce\\":\\"gf69kepV+m5tGxUIsFtLi6pwg=\\",\\"readerPublicKey\\":\\"ftl+VEHPB17r2Nioc9QZ7X/6w\\"}"
 *       }
 *     ]
 *   }
 * }
 * Note: signal is added within the javascript code to the parsed JSON options
 * 
 * Return Value:
 * 
 * A Promise that resolves with one of the following subclasses of Credential:
 * 
 * PasswordCredential
 * IdentityCredential
 * FederatedCredential
 * OTPCredential
 * PublicKeyCredential
 * 
 * 
 * References:
 * 
 * https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/get
 * @param {string} options - json
 * @returns {Promise.<string>}
 */
export async function jsa_navigator_identity_get_v000(options) {
	// BEGIN USER CODE
	try{
		if(options==null)return(Promise.reject("options null"));
		if(options.length==0)return(Promise.reject("invalid options"));
		try{
			options=JSON.parse(options);
		}catch(e){
			return(Promise.reject("Failed to parse options json: "+e.toString()));
		}
		const controller = new AbortController();
		options.signal=controller.signal;
		console.info(typeof(navigator));
		console.info(typeof(navigator.identity));
		console.info(typeof(navigator).identity.get);
		const response= await navigator.identity.get(options);
		console.info(JSON.stringify(Object.keys(response)));
		if(response==null)return(Promise.resolve(null));
		return(Promise.resolve(JSON.stringify(response)));
	}catch(e){
		return(Promise.reject(e.toString()));
	}
	// END USER CODE
}
