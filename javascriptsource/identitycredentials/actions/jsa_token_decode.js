// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import CBOR from"cbor-js";
function str2ab(binaryString) {
    var bytes=new Uint8Array(binaryString.length);
    for(var i=0;i<binaryString.length;i++){
        bytes[i]=binaryString.charCodeAt(i);
    }
    return bytes.buffer;
}
const BROWSER_HANDOVER_V1="BrowserHandoverv1";
const ANDROID_CREDENTIAL_DOCUMENT_VERSION="ANDROID-HPKE-v1";
// END EXTRA CODE

/**
 * Decodes token as per https://github.com/openwallet-foundation-labs/identity-credential/blob/main/server/src/main/java/com/android/identity/wallet/server/VerifierServlet.kt#L1256
 * @param {string} token
 * @returns {Promise.<string>}
 */
export async function jsa_token_decode(token) {
	// BEGIN USER CODE
	try{
			let encryptedCredentialDocumentBase64=token;
			let encryptedCredentialDocument=atob(encryptedCredentialDocumentBase64.replace(/_/g,"/").replace(/-/g,"+"));
			let encryptedCredentialDocumentBuffer=str2ab(encryptedCredentialDocument);
			let map=CBOR.decode(encryptedCredentialDocumentBuffer);
			let version=map["version"];
			if (version!=(ANDROID_CREDENTIAL_DOCUMENT_VERSION)) {
				return(Promise.reject(`Unexpected version ${version}`))
			}
			let encryptionParameters=map["encryptionParameters"];
			let pkEm=encryptionParameters["pkEm"];
			return(Promise.resolve(JSON.stringify({encryptionParameters:encryptionParameters,pkEm:pkEm})));
	}catch(e){
		return(Promise.reject(e.toString()));
	}
	// END USER CODE
}
