// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from "../../agent_sdk/support/entidad";
//import {DrpcRepository} from '../../agent_sdk/node_modules/@credo-ts/drpc';

// END EXTRA CODE

/**
 * Get all QuestionAnswer records
 * @param {string} agent_key
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_modules_drpc_getAll(agent_key) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		console.info(">>>");

		console.info("typeof(agent.modules.drpc.drpcMessageService)");
		console.info(typeof(agent.modules.drpc.drpcMessageService));
		//object

		console.info("typeof(agent.modules.drpc.drpcMessageService.createRequestMessage)");
		console.info(typeof(agent.modules.drpc.drpcMessageService.createRequestMessage));
		//function

		console.info("typeof(agent.modules.drpc.drpcMessageService.createResponseMessage)");
		console.info(typeof(agent.modules.drpc.drpcMessageService.createResponseMessage));
		//function

		console.info("typeof(agent.modules.drpc.drpcMessageService.createRequestListener)");
		console.info(typeof(agent.modules.drpc.drpcMessageService.createRequestListener));
		//function

		console.info("typeof(agent.modules.drpc.drpcMessageService.createResponseListener)");
		console.info(typeof(agent.modules.drpc.drpcMessageService.createResponseListener));
		//function

		console.info("typeof(agent.modules.drpc.drpcMessageService.receiveResponse)");
		console.info(typeof(agent.modules.drpc.drpcMessageService.receiveResponse));
		//function

		console.info("typeof(agent.modules.drpc.drpcMessageService.receiveRequest)");
		console.info(typeof(agent.modules.drpc.drpcMessageService.receiveRequest));
		//function

		console.info("typeof(agent.modules.drpc.drpcMessageService.emitStateChangedEvent)");
		console.info(typeof(agent.modules.drpc.drpcMessageService.emitStateChangedEvent));
		//function

		console.info("typeof(agent.modules.drpc.drpcMessageService.updateState)");
		console.info(typeof(agent.modules.drpc.drpcMessageService.updateState));
		//function

		console.info("typeof(agent.modules.drpc.drpcMessageService.findByThreadAndConnectionId)");
		console.info(typeof(agent.modules.drpc.drpcMessageService.findByThreadAndConnectionId));
		//function

		console.info("typeof(agent.modules.drpc.drpcMessageService.findAllByQuery)");
		console.info(typeof(agent.modules.drpc.drpcMessageService.findAllByQuery));
		//function

		console.info("typeof(agent.modules.drpc.drpcMessageService.getById)");
		console.info(typeof(agent.modules.drpc.drpcMessageService.getById));
		//function

		console.info("typeof(agent.modules.drpc.drpcMessageService.deleteById)");
		console.info(typeof(agent.modules.drpc.drpcMessageService.deleteById));
		//function

		console.info("<<<");
		return Promise.resolve(JSON.stringify(
			//await agent.modules.drpc.getAll()
			await agent.modules.drpc.findAllByQuery({})
		));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
