// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from "../../agent_sdk/support/entidad";
// END EXTRA CODE

/**
 *   public async findAllByQuery(agentContext: AgentContext, query: Query<DrpcRecord>, queryOptions?: QueryOptions) 
 * 
 * export class DrpcRecord extends BaseRecord<DefaultDrpcMessageTags, CustomDrpcMessageTags> {
 *   public request?: DrpcRequest
 *   public response?: DrpcResponse
 *   public connectionId!: string
 *   public role!: DrpcRole
 *   public state!: DrpcState
 *   public threadId!: string
 * 
 *   public static readonly type = 'DrpcRecord'
 *   public readonly type = DrpcRecord.type
 * 
 *   public constructor(props: DrpcStorageProps) {
 *     super()
 * 
 *     if (props) {
 *       this.id = props.id ?? utils.uuid()
 *       this.request = props.request
 *       this.response = props.response
 *       this.connectionId = props.connectionId
 *       this._tags = props.tags ?? {}
 *       this.role = props.role
 *       this.state = props.state
 *       this.threadId = props.threadId
 *     }
 *   }
 * @param {string} agent_key
 * @param {string} query
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_modules_drpc_drpcMessageService_findAllByQuery(agent_key, query) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return(Promise.reject("Invalid agent_key parameter"));
		if(query==null)return(Promise.reject("Invalid query parameter"));
		try{
			query=JSON.parse(query);
		}catch(e){
			return(Promise.reject(e.toString()));
		}
		let agent=support.cache.get(agent_key);
		if(agent==null)return(Promise.reject("Agent not found in cache"));
		return(Promise.resolve(JSON.stringify(await agent.modules.drpc.drpcMessageService.findAllByQuery(agent.context,query))));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
