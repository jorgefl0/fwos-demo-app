// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import "../shim.js";
import{
	ConnectionEventTypes,
	AgentEventTypes,
	BasicMessageEventTypes,
	CredentialEventTypes,
	ProofEventTypes,
	DidExchangeState
}from'@credo-ts/core';
import support from "../support/entidad";
// END EXTRA CODE

/**
 * Message handler
 * @param {string} agent_key
 * @param {string} messageType
 * @param {Nanoflow} callback
 * @param {string} payloadParameterName - optional
 * @param {string} userDataParameterName - optional
 * @param {MxObject} userData - optional
 * @param {string} eventTypeParameterName - optional
 * @returns {Promise.<void>}
 */
export async function jsa_aries_agents_event_messageProcessed_messageType_setupConnectionListener(agent_key, messageType, callback, payloadParameterName, userDataParameterName, userData, eventTypeParameterName) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");										//mandatory
		if(callback==null)return Promise.reject("Invalid callback parameter");											//mandatory
		eventType=AgentEventTypes.AgentMessageProcessed;
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		agent.events.on(eventType,async function({payload}){
			let currentMessageType=payload?.["message"]?.["type"];
			if(currentMessageType==messageType){
				let args={};
				if(payloadParameterName!=null)args[payloadParameterName]=JSON.stringify(payload,0,2);
				if(userDataParameterName!=null)args[userDataParameterName]=userData;
				//if(eventTypeParameterName!=null)args[eventTypeParameterName]=eventType;
				await callback.call(window,args);
			}else{
			}
		});
		return Promise.resolve();
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
